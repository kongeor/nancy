/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package gr.cons.nancy.lang;

import gr.cons.nancy.parser.NancyLexer;
import gr.cons.nancy.parser.NancyParser;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.TerminalNode;

import java.io.IOException;
import java.util.List;

public class App {

    public static void main(String[] args) throws IOException {
//        var code = "(let [x 1 y true] (if y x (inc x)))";
        var code = """
                   (let [x : int
                         y : bool
                         f : (bool -> int)] (f y x))
                   """;
//        var code = "(1 :(bool -> int))";
        var inputStream = CharStreams.fromString(code);
        var lexer = new NancyLexer(inputStream);
        var tokenStream = new CommonTokenStream(lexer);
        var parser = new NancyParser(tokenStream);

        evalExpr(parser.expr());
    }

    public static void evalExpr(NancyParser.ExprContext expr) {
        TerminalNode anInt = expr.INT();
        TerminalNode anSymb = expr.SYMB();
        NancyParser.Type_exprContext aType = expr.type_expr();
        List<NancyParser.ExprContext> expr1 = expr.expr();
        if (anInt != null) {
            System.out.println(anInt);
        }  else if (anSymb != null) {
            System.out.println(anSymb);
        } else if (aType != null) {
            System.out.println(evalType(aType));
        }
        else if (expr1 != null) {
            for (NancyParser.ExprContext e1 : expr1) {
                evalExpr(e1);
            }
        }
    }

    public static ExprType evalType(NancyParser.Type_exprContext expr) {
        if (expr.INT_TYPE() != null) {
            return new IntType();
        } else if (expr.BOOL_TYPE() != null) {
            return new BoolType();
        } else {
            List<NancyParser.Type_exprContext> typeExprContexts = expr.type_expr();
            return new FuncType(evalType(typeExprContexts.get(0)), evalType(typeExprContexts.get(1)));
        }
    }

    public sealed interface ExprType permits BoolType, IntType, FuncType {}

    public record BoolType() implements ExprType {}
    public record IntType() implements ExprType {}
    public record FuncType(ExprType from, ExprType to) implements ExprType {}

}
